dp 解法

字符串 s
模式pattern p

dp[i][j] = true 表示在 s[i] 和 p[j] 之前都是ok的
dp[i + 1][j + 1] 表示最终的匹配结果

那么动态规划
1. 初始化数组, dp[0][0] 为true， 如果p 是 "**..." 这种开头的，也可以初始化dp[0][j] 部分， 比如dp[0][1], dp[0][2] = true
2. 构造转移方程
	for i := 1; i <= l1; i++ {
		for j := 1; j <= l2; j++ {
			sc := s[i-1]
			pc := p[j-1]
			if pc == '*' {
				dp[i][j] = dp[i][j-1] || dp[i-1][j]
			} else if pc == '?' || sc == pc {
				dp[i][j] = dp[i-1][j-1]
			}
		}
	}

	如果pc = '*' 这时候状态看一下附属的png

	如果是 '?' 或者是 sc == pc ???

最后dp[i + 1][j + 1]则是最终的匹配结果



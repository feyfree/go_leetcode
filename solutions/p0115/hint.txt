DP 动态规划

s -> target : j
t -> 搜索区间 : i

// 如果搜索所在位置  相等
if s[j - 1] == t[i - 1]
    // 因为t大于s, 所以 t 在这个相等的地方可以用也可以不用
    // 让 s[i] 参与匹配，这时候只需要让 s 中 [0,i-1] 个字符去匹配 t 中的 [0,j-1] 字符即可
    // 不让 s[i] 参与匹配，也就是需要让 s 中 [0,i-1] 个字符去匹配 t 中的 [0,j] 字符
    dp[i][j] = dp[i - 1][j - 1] + dp[i][j - 1]
else
    dp[i][j] = dp[i][j - 1]


关于字符串匹配，通常有两种（你也可以理解为一种）通用的状态定义：
1. f[i][j] 表示「第一个字符 s 中 [0,i] 个字符」与「第二个字符 t 中 [0,j] 个字符」的匹配结果
2. f[i][j] 表示「第一个字符 s 中 [0,i] 个字符」与「第二个字符 t 中 [0,j] 个字符」且 「最后一个字符为 t[j]」的匹配结果
往两个字符串的头部追加「不存在」的字符，目的是为了能够构造出可以滚动（被累加）下去的初始化值

